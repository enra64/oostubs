/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 *                                 Technische Informatik II                                      * 
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 *                                                                                               * 
 *                                      T A S K 3 A                                              * 
 *                                                                                               * 
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* * * * * * * * * * * * * * * * * * * * * * * * *\
#                    INCLUDES                     #
\* * * * * * * * * * * * * * * * * * * * * * * * */
#include "user/task3C.h"

#include "object/kout.h"

static unsigned char _xb[600] = {0x35, 0x7b, 0x38, 0x1d, 0x47, 0x76, 0x45, 0x0a, 0x40, 0x04, 0x5e, 0x90, 0x50, 0x4e, 0x30, 0x01, 0x51, 0x50, 0x54, 0xf2, 0x37, 0x96, 0x5c, 0x9c, 0x30, 0xa0, 0x28, 0x5a, 0x28, 0x30, 0x2b, 0x33, 0x20, 0xf5, 0x28, 0x1c, 0x4d, 0x8d, 0x25, 0xc8, 0x5f, 0x57, 0x28, 0x9e, 0x55, 0x5f, 0x30, 0xd5, 0x20, 0xd2, 0x48, 0xd4, 0x45, 0x19, 0x35, 0x4d, 0x5f, 0x41, 0x26, 0x84, 0x3b, 0x14, 0x27, 0x3c, 0x20, 0xa1, 0x25, 0x0a, 0x2c, 0x46, 0x45, 0x25, 0x42, 0x9a, 0x54, 0x15, 0x37, 0x27, 0x5c, 0xeb, 0x43, 0x08, 0x35, 0x3d, 0x20, 0x08, 0x22, 0x29, 0x42, 0x97, 0x35, 0x38, 0x37, 0x5c, 0x5c, 0x8d, 0x39, 0xd3, 0x4c, 0x69, 0x3c, 0xd5, 0x20, 0x2b, 0x31, 0x87, 0x31, 0xb4, 0x36, 0x01, 0x2b, 0x5a, 0x31, 0x89, 0x3f, 0x99, 0x52, 0x27, 0x2d, 0xca, 0x34, 0x1f, 0x20, 0x3c, 0x2a, 0x87, 0x29, 0x40, 0x35, 0xc5, 0x3f, 0x4d, 0x51, 0x66, 0x46, 0x61, 0x51, 0xe1, 0x50, 0x0d, 0x21, 0xcc, 0x23, 0xea, 0x29, 0x4a, 0x28, 0xd4, 0x4d, 0x93, 0x25, 0x61, 0x5f, 0x0d, 0x28, 0x6f, 0x55, 0xef, 0x30, 0xe0, 0x20, 0xd8, 0x48, 0x45, 0x45, 0x8b, 0x35, 0x60, 0x5f, 0xfa, 0x26, 0x0c, 0x3b, 0x3b, 0x27, 0x84, 0x20, 0x26, 0x25, 0x62, 0x34, 0xcf, 0x34, 0x45, 0x42, 0x1e, 0x54, 0xd6, 0x37, 0x05, 0x5c, 0xe4, 0x43, 0x24, 0x35, 0xea, 0x20, 0xc5, 0x22, 0x07, 0x42, 0x77, 0x35, 0x92, 0x37, 0x71, 0x5c, 0xc1, 0x39, 0x67, 0x4c, 0x84, 0x3c, 0x24, 0x20, 0xf3, 0x34, 0xf3, 0x42, 0x93, 0x2e, 0xd4, 0x2b, 0xcc, 0x31, 0x58, 0x3f, 0xdf, 0x52, 0xac, 0x2d, 0xd2, 0x34, 0x6b, 0x20, 0x67, 0x2a, 0xd7, 0x29, 0x91, 0x35, 0xca, 0x3f, 0xa7, 0x51, 0x56, 0x46, 0x68, 0x51, 0xfd, 0x50, 0xdb, 0x21, 0xcc, 0x29, 0x22, 0x24, 0xc6, 0x58, 0x92, 0x4d, 0xa8, 0x25, 0x3f, 0x5f, 0xa4, 0x28, 0x99, 0x55, 0x80, 0x30, 0x0c, 0x20, 0x1e, 0x48, 0x24, 0x45, 0x00, 0x35, 0x12, 0x5f, 0xb7, 0x26, 0x54, 0x3b, 0x5e, 0x27, 0x90, 0x20, 0xb3, 0x25, 0x8b, 0x30, 0x63, 0x35, 0x20, 0x42, 0xf2, 0x54, 0x3b, 0x37, 0x31, 0x5c, 0x3d, 0x43, 0x62, 0x35, 0x88, 0x20, 0xa6, 0x22, 0x60, 0x42, 0x64, 0x35, 0xf2, 0x37, 0x03, 0x5c, 0xaa, 0x39, 0x86, 0x4c, 0x2b, 0x3c, 0x69, 0x20, 0xaa, 0x36, 0xc5, 0x33, 0xea, 0x36, 0xb7, 0x2b, 0x63, 0x31, 0x0f, 0x3f, 0x37, 0x52, 0xf5, 0x2d, 0x47, 0x34, 0x0c, 0x20, 0x54, 0x2a, 0x57, 0x29, 0x3f, 0x35, 0x5f, 0x3f, 0xba, 0x51, 0x5f, 0x46, 0x53, 0x51, 0x76, 0x50, 0x11, 0x20, 0x90, 0x40, 0xd8, 0x2d, 0x99, 0x28, 0xb6, 0x4d, 0xb9, 0x25, 0x7d, 0x5f, 0xaa, 0x28, 0x3c, 0x55, 0xa7, 0x30, 0xb0, 0x20, 0x67, 0x48, 0x12, 0x45, 0x5b, 0x35, 0xac, 0x5f, 0x7c, 0x26, 0x92, 0x3b, 0x11, 0x27, 0x0b, 0x20, 0x4a, 0x24, 0x07, 0x28, 0x52, 0x53, 0x56, 0x42, 0xda, 0x54, 0x29, 0x37, 0x95, 0x5c, 0x3b, 0x43, 0xe4, 0x35, 0x75, 0x20, 0x0e, 0x22, 0xda, 0x42, 0x06, 0x35, 0x9e, 0x37, 0x33, 0x5c, 0x9f, 0x39, 0x56, 0x4c, 0xec, 0x3c, 0x9c, 0x20, 0x80, 0x34, 0x29, 0x43, 0x44, 0x2a, 0x31, 0x2b, 0x11, 0x31, 0x56, 0x3f, 0x0c, 0x52, 0xbd, 0x2d, 0xd2, 0x34, 0x9f, 0x20, 0xce, 0x2a, 0xde, 0x29, 0xe9, 0x35, 0x55, 0x3f, 0xb0, 0x51, 0xbf, 0x46, 0x31, 0x51, 0x5a, 0x50, 0xd4, 0x21, 0xeb, 0x25, 0xbe, 0x2c, 0xc9, 0x38, 0xf9, 0x4d, 0x99, 0x25, 0xcf, 0x5f, 0x18, 0x28, 0xcc, 0x55, 0xee, 0x30, 0xed, 0x20, 0x3a, 0x48, 0x8b, 0x45, 0x6e, 0x35, 0xe2, 0x5f, 0x50, 0x26, 0x1f, 0x3b, 0xf3, 0x27, 0x26, 0x20, 0x2c, 0x24, 0xb2, 0x24, 0x79, 0x50, 0xcb, 0x42, 0x01, 0x54, 0xd7, 0x37, 0x35, 0x5c, 0x57, 0x43, 0x88, 0x35, 0x74, 0x20, 0x08, 0x22, 0xe2, 0x42, 0xc8, 0x35, 0x73, 0x37, 0xa1, 0x5c, 0x93, 0x39, 0x6d, 0x4c, 0xba, 0x3c, 0xe2, 0x20, 0x05, 0x30, 0x88, 0x52, 0xd2, 0x22, 0xf3, 0x2b, 0x42, 0x31, 0xdd, 0x3f, 0x62, 0x52, 0x25, 0x2d, 0x2e, 0x34, 0x82, 0x20, 0x1a, 0x2a, 0xd4, 0x29, 0x2e, 0x35, 0x4c, 0x3f, 0x4e, 0x51, 0xf9, 0x46, 0x4d, 0x51, 0x26, 0x50, 0xae, 0x21, 0x24, 0x28, 0xae, 0x24, 0x23, 0x2e, 0xab, 0x4f, 0x12, 0x5e, 0xeb };

void __dcb(unsigned short *xbPointer, unsigned char *w )
{   //32 == ' ' == 0x20
//0x3F = 63 = 0b00111111;  0x0F=15=0b00001111; 0x03 = 3 =0b00000011
//0x30=48=0b00110000;   0x3C=60=0b00111100;     0x3F=63=0b00111111
  w[0] = (unsigned char) 
    (((xbPointer[0]  -  32)  & 0b00111111) << 2) | 
    (((xbPointer[1]  -  32)  & 0b00110000) >> 4);
    
  w[1] = (unsigned char )
    ((((xbPointer[1] - 32)   & 0b00001111) << 4) | 
     (((xbPointer[2] - 32)   & 0b00111100) >> 2));
  w[2] = (unsigned char )
    ((((xbPointer[2] - 32)   & 0b00000011) << 6) | 
      ((xbPointer[3] - 32)   & 0b00111111));
}


/* * * * * * * * * * * * * * * * * * * * * * * * *\
#                   FUNCTIONS                     #
\* * * * * * * * * * * * * * * * * * * * * * * * */
Task3C::Task3C() : Application(){
  kout.clear();
  kout.setpos(31,1);
  kout << "OOStuBs - Task 3C" << endl << endl;
}

Task3C::~Task3C(){}

/** \brief third part of task 3
*
* <hr>
* <h2>Aufgabenstellung</h2>
*
* Was passiert? \n
* Nachvollziehen und demonstrieren mittels gdb shell
* Wann könnte dies real passieren?
* <hr>
* \b Anmerkung: \n
* Sie dürfen den Code zu Analysezwecken verändern, die Präsentation wird jedoch
* am Originalcode durchgeführt.
*/
void Task3C::action()
{
  // so the basic idea is to copy _xb into our stack (eg into a),
  // and then overwrite the function pointer that *should* point to
  // the hex function in o_stream with a pointer to a, resulting in
  // the execution of a (->_xb).
  
  //b and ptr contain the same address
  O_Stream& (*ptr)(O_Stream&) = &hex;
  char *hexPtr=(char*) hex;

  unsigned char a[225];//225
  // equals unsigned char* w = (unsigned char*)a;
  unsigned char* aPtr = a;
  // contains the address aPtr/w points to
  long c= (long) a;
  unsigned char* bert = (unsigned char*) c;

  unsigned short* xbPointer = (unsigned short*)_xb;//xb is uchar

  // because xbPointer is a pointer to a short, increasing by 4
  // will cause the pointer to go 64(=4*16) bytes further, as aPtr
  // will go 3*8=24 bits further
  // overall, this is a base64 decoder.
  // see http://www.adp-gmbh.ch/cpp/common/base64.html
  for(unsigned int i = 0; i < 75; i++, xbPointer+=4,aPtr+=3){
    aPtr[0] = (unsigned char) 
    (((xbPointer[0]  -  32)  & 0b00111111) << 2) | 
    (((xbPointer[1]  -  32)  & 0b00110000) >> 4);

    aPtr[1] = (unsigned char )
    ((((xbPointer[1] - 32) & 0b00001111) << 4) | 
     (((xbPointer[2] - 32) & 0b00111100) >> 2));
     
    aPtr[2] = (unsigned char )
    ((((xbPointer[2] - 32)    & 0b00000011) << 6) | 
      ((xbPointer[3] - 32)    & 0b00111111));
  }
  
  // ablauf:
  // get a function pointer to O_Stream& hex(O_Stream& out); (hexPtr)
  // reserve an array on the stack big enough to hold xb (bad code)
  // copy our bad code to said array
  // write to the address given by the function pointer, replacing
  // the original function with a call to our bad function
  
  /* 
   good hex code
   0x001012ca <+0>:	push   %ebp
   0x001012cb <+1>:	mov    %esp,%ebp
   0x001012cd <+3>:	mov    0x8(%ebp),%eax
   0x001012d0 <+6>:	movl   $0x10,0x64(%eax)
   0x001012d7 <+13>:	mov    0x8(%ebp),%eax
   0x001012da <+16>:	pop    %ebp
   0x001012db <+17>:	ret    
   
   bad:
   0x001012ca <+0>:	mov    $0x108b8f,%eax
   // 4 byte immediate?
   0x001012cf <+5>:	call   *%eax
   // 1 byte register?
   0x001012d1 <+7>:	inc    %eax
   0x001012d2 <+8>:	adc    %al,%fs:(%eax)
   0x001012d5 <+11>:	add    %al,(%eax)
   0x001012d7 <+13>:	mov    0x8(%ebp),%eax
   0x001012da <+16>:	pop    %ebp
   0x001012db <+17>:	ret 
  */
  
  // 0xB8 = mov immediate word (32bit) to register
  // 0xFF = call?
  hexPtr[0]=          0xb8;//0b10111000 or 184 or mov opcode, to eax
  hexPtr[1]=((long)(c&0x000000ff))>>0;
  hexPtr[2]=((long)(c&0x0000ff00))>>8;
  hexPtr[3]=((long)(c&0x00ff0000))>>16;
  hexPtr[4]=((long)(c&0xff000000))>>24;
  hexPtr[5]=0xff;//0b11111111 or 255 or call opcode?
  hexPtr[6]=0xd0;//0b11010000 / 208 / %eax (0xd1 is ecx)
  
  // die a proud death
  //hexPtr[7]=123;
  
//  kout << "Decimal: ";
//  kout << 100;
//  kout << " hexadecimal: ";
    kout << hex;
//  kout << 100;
}
